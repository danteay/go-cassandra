// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// Binder is an autogenerated mock type for the Binder type
type Binder struct {
	mock.Mock
}

// IsBindable provides a mock function with given fields: _a0, _a1
func (_m *Binder) IsBindable(_a0 interface{}, _a1 reflect.Kind) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, reflect.Kind) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MapToStruct provides a mock function with given fields: _a0, _a1
func (_m *Binder) MapToStruct(_a0 map[string]interface{}, _a1 reflect.Type) (reflect.Value, error) {
	ret := _m.Called(_a0, _a1)

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func(map[string]interface{}, reflect.Type) reflect.Value); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}, reflect.Type) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBinder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBinder creates a new instance of Binder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBinder(t mockConstructorTestingTNewBinder) *Binder {
	mock := &Binder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
